package no.ntnu.webappgroup03.service;

import java.util.Optional;
import java.util.stream.Collectors;
import no.ntnu.webappgroup03.dto.UserProfileDto;
import no.ntnu.webappgroup03.model.Hotel;
import no.ntnu.webappgroup03.model.Role;
import no.ntnu.webappgroup03.model.User;
import no.ntnu.webappgroup03.repository.UserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
public class UserService {

  @Autowired
  private UserRepository userRepository;

  /**
   * Get all user currently stored in the application state (database).
   *
   * @return all users.
   */
  public Iterable<User> getAll() {
    return userRepository.findAll();
  }

  /**
   * Get all users currently stored in the database as data transfer objects.
   * Code generated by AI.
   *
   * @return List of UserProfileDto objects
   */
  public List<UserProfileDto> getAllUsers() {
    return ((List<User>) this.userRepository.findAll())
        .stream()
        .map(this::convertToDto)
        .collect(Collectors.toList());
  }

  public Optional<User> getOne(int id) {
    return this.userRepository.findById(id);
  }

  /**
   * Convert user objects to a data transfer object.
   * Code generated by AI.
   *
   * @param user user to be converted
   * @return the newly created dto
   */
  private UserProfileDto convertToDto(User user) {
    List<String> roles = user.getRoles().stream()
        .map(Role::getName)
        .toList();
    return new UserProfileDto(
        user.getId(),
        user.getFirstName(),
        user.getLastName(),
        user.getEmail(),
        user.getPhoneNumber(),
        user.isActive(),
        roles
    );
  }

  /**
   * Look up a user in the application state (database).
   *
   * @param id ID of the user to look up
   * @return The user or null if none found
   */
  public Optional<User> findUserById(Integer id) {
    return userRepository.findById(id);
  }

  public Optional<User> findUserByEmail(String email) {
    return userRepository.findByEmail(email);
  }

  /**
   * Add a user to the database.
   *
   * @param user The user to add
   * @return True on success, false if the user was not added.
   */
  public boolean add(User user) {
    boolean added = false;
    if (canBeAdded(user)) {
      userRepository.save(user);
      added = true;
    }
    return added;
  }

  /**
   * Check if the provided user can be added to the application state (database).
   *
   * @param user User to be checked
   * @return True if the user is valid and can be added to the database
   */
  private boolean canBeAdded(User user) {
    return user != null && user.isValid()
        && (userRepository.findById(user.getId()).isEmpty());
    // user.getId() == null ||
  }


  /**
   * Delete a user from application state (database).
   *
   * @param id ID of the user to delete
   * @return true when deleted, false on error
   */
  public boolean deleteUser(int id) {
    Optional<User> user = this.userRepository.findById(id);
    if (user.isPresent()) {
      userRepository.deleteById(id);
    }
    return user.isPresent();
  }
}
